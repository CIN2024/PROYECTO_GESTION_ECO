VERSION NUMERO 7 
from tkinter import *
from PIL import Image, ImageTk
import imutils
import cv2
import numpy as np
from ultralytics import YOLO
import math
import control_contenedores  # Asegúrate de tener este archivo correctamente configurado
import time

# Definición de variables globales
arduino = None  # Esto se inicializa en ventana_principal
detection_count = 0  # Para contar validaciones consecutivas
detection_threshold = 5  # Número de validaciones consecutivas necesarias para confirmar detección
last_detection_time = time.time()  # Inicializar variable de tiempo para detecciones

def clean_lbl():
    # Limpiar etiquetas de imagen
    lblimg.config(image='')
    lblimgtxt.config(image='')

def images(img, imgtxt):
    # Mostrar imágenes en la GUI
    img = np.array(img, dtype="uint8")
    img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)
    img = Image.fromarray(img)
    img_ = ImageTk.PhotoImage(image=img)
    lblimg.configure(image=img_)
    lblimg.image = img_

    imgtxt = np.array(imgtxt, dtype="uint8")
    imgtxt = cv2.cvtColor(imgtxt, cv2.COLOR_BGR2RGB)
    imgtxt = Image.fromarray(imgtxt)
    img_txt = ImageTk.PhotoImage(image=imgtxt)
    lblimgtxt.configure(image=img_txt)
    lblimgtxt.image = img_txt

    # Liberar recursos de PIL
    img.close()
    imgtxt.close()

# Scanning Function
def Scanning():
    global img_organico, img_papel, img_plastico, img_no_residuo
    global img_organicotxt, img_papeltxt, img_plasticotxt, img_no_residuotxt, pantalla
    global lblimg, lblimgtxt, detect, detection_count, last_detection_time

    # Interfaz
    lblimg = Label(pantalla)
    lblimg.place(x=63, y=135)

    lblimgtxt = Label(pantalla)
    lblimgtxt.place(x=1040, y=477)
    detect = False

    # Read VideoCapture
    if cap is not None:
        ret, frame = cap.read()
        frame_show = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # True
        if ret:
            # Detección con YOLO
            results = model(frame, stream=True, verbose=False)
            for res in results:
                boxes = res.boxes
                for box in boxes:
                    # Coordenadas de la caja delimitadora
                    x1, y1, x2, y2 = box.xyxy[0]
                    x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)

                    # Asegurarse de que las coordenadas no sean negativas
                    x1, y1, x2, y2 = max(0, x1), max(0, y1), max(0, x2), max(0, y2)

                    # Clase del residuo detectado
                    cls = int(box.cls[0])

                    # Confianza
                    conf = box.conf[0]

                    current_time = time.time()
                    if current_time - last_detection_time > 3:  # Pausa de 3 segundos entre detecciones
                        detect = False

                    if not detect:
                        # Clasificar y realizar validaciones
                        if conf >= 0.50:  # Confianza umbral del 50%
                            if detection_count >= detection_threshold:  # Verificar si alcanza el umbral
                                if cls in [0, 1, 5]:  # Orgánico
                                    cv2.rectangle(frame_show, (x1, y1), (x2, y2), (0, 255, 0), 2)
                                    text = f'{clsName[cls]} {int(conf * 100)}%'
                                    cv2.putText(frame_show, text, (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
                                    images(img_organico, img_organicotxt)
                                    control_contenedores.enviar_comando_a_arduino(cls)
                                    print(f"Comando enviado para orgánico {cls}")
                                elif cls in [6, 7, 8]:  # Papel
                                    cv2.rectangle(frame_show, (x1, y1), (x2, y2), (255, 255, 0), 2)
                                    text = f'{clsName[cls]} {int(conf * 100)}%'
                                    cv2.putText(frame_show, text, (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 2)
                                    images(img_papel, img_papeltxt)
                                    control_contenedores.enviar_comando_a_arduino(cls)
                                    print(f"Comando enviado para papel {cls}")
                                elif cls in [2, 3, 4]:  # Plástico
                                    cv2.rectangle(frame_show, (x1, y1), (x2, y2), (0, 0, 255), 2)
                                    text = f'{clsName[cls]} {int(conf * 100)}%'
                                    cv2.putText(frame_show, text, (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
                                    images(img_plastico, img_plasticotxt)
                                    control_contenedores.enviar_comando_a_arduino(cls)
                                    print(f"Comando enviado para plástico {cls}")
                            else:
                                detection_count += 1  # Incrementar el contador de validaciones consecutivas
                                print(f"Validación en progreso: {detection_count}/{detection_threshold}")
                        else:  # No residuos
                            cv2.rectangle(frame_show, (x1, y1), (x2, y2), (0, 0, 0), 2)  # Rectángulo negro
                            text = 'NO RESIDUO'
                            cv2.putText(frame_show, text, (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2)
                            images(img_no_residuo, img_no_residuotxt)
                            print("Objeto no reconocido como residuo.")
                            detection_count = 0  # Reiniciar el contador si no es un residuo

                        detect = True
                        last_detection_time = time.time()  # Actualizar el tiempo de la última detección
                    else:
                        detection_count = 0  # Reiniciar el contador si no hubo detección válida

            # Redimensionar el frame
            frame_show = imutils.resize(frame_show, width=640)

            # Convertir el video para mostrarlo en la GUI
            im = Image.fromarray(frame_show)
            img = ImageTk.PhotoImage(image=im)
            lblVideo.configure(image=img)
            lblVideo.image = img

            # Aumentar el tiempo de refresco para mejorar el rendimiento de la interfaz
            lblVideo.after(50, Scanning)

            # Liberar recursos PIL
            im.close()
        else:
            cap.release()
            cv2.destroyAllWindows()  # Cerrar todas las ventanas de OpenCV

# Función para manejar el cierre de la ventana
def on_closing():
    global cap
    if cap is not None:
        cap.release()  # Liberar la cámara
    pantalla.destroy()  # Cerrar la ventana de la interfaz
    print("Interfaz cerrada. Deteniendo el sistema.")

# Main
def ventana_principal():
    global cap, lblVideo, model, clsName, img_organico, img_papel, img_plastico, img_no_residuo
    global img_organicotxt, img_papeltxt, img_plasticotxt, img_no_residuotxt, pantalla
    global last_detection_time

    # Inicializar la conexión con Arduino
    arduino = control_contenedores.inicializar_conexion_arduino()

    # Ventana principal
    pantalla = Tk()
    pantalla.title("RECICLAJE INTELIGENTE")
    pantalla.geometry("1280x720")

    # Fondo
    imagenF = PhotoImage(file="setUp/Canva1.png")
    background = Label(image=imagenF, text="Inicio")
    background.place(x=0, y=0, relwidth=1, relheight=1)

    # Inicializar la variable de tiempo para las detecciones
    last_detection_time = time.time()

    # Nombres de las clases (Ajustado para que coincidan con 'data.yaml')
    clsName = [
        'ORGANICO',  # Clase 0
        'ORGANICO',  # Clase 1
        'PLASTICO',  # Clase 2
        'PLASTICO',  # Clase 3
        'PLASTICO',  # Clase 4
        'ORGANICO',  # Clase 5
        'PAPEL',  # Clase 6
        'PAPEL',  # Clase 7
        'PAPEL'   # Clase 8
    ]

    # Modelo de YOLO
    model = YOLO('Modelos/best.pt')

    # Imágenes
    img_organico = cv2.imread("setUp/organico.png")
    img_papel = cv2.imread("setUp/papel.png")
    img_plastico = cv2.imread("setUp/plastico.png")
    img_no_residuo = cv2.imread("setUp/no_residuo.png")

    img_organicotxt = cv2.imread("setUp/organicotxt.png")
    img_papeltxt = cv2.imread("setUp/papeltxt.png")
    img_plasticotxt = cv2.imread("setUp/plasticotxt.png")
    img_no_residuotxt = cv2.imread("setUp/no_residuotxt.png")

    # Video
    lblVideo = Label(pantalla)
    lblVideo.place(x=338, y=133)

    # Elegimos la cámara
    cap = cv2.VideoCapture(1, cv2.CAP_DSHOW)
    cap.set(3, 1280)
    cap.set(4, 720)
    Scanning()

    # Configurar la función de cierre
    pantalla.protocol("WM_DELETE_WINDOW", on_closing)

    # Mantener la ventana abierta
    pantalla.mainloop()

if __name__ == "__main__":
    ventana_principal()

