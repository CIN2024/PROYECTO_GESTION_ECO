# Scanning Function
def Scanning():
    global img_organico, img_papel, img_plastico
    global img_organicotxt, img_papeltxt, img_plasticotxt, pantalla
    global lblimg, lblimgtxt

    # Interfaz
    lblimg = Label(pantalla)
    lblimg.place(x=63, y=135)

    lblimgtxt = Label(pantalla)
    lblimgtxt.place(x=1040, y=477)
    detect = False

    # Read VideoCapture
    if cap is not None:
        ret, frame = cap.read()
        frame_show = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # True
        if ret == True:
            # Yolo | AntiSpoof
            results = model(frame, stream=True, verbose=False)
            for res in results:
                # Box
                boxes = res.boxes
                for box in boxes:
                    detect = True
                    # Bounding box
                    x1, y1, x2, y2 = box.xyxy[0]
                    x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)

                    # Error < 0
                    if x1 < 0: x1 = 0
                    if y1 < 0: y1 = 0
                    if x2 < 0: x2 = 0
                    if y2 < 0: y2 = 0

                    # Class (incluyendo subclases)
                    cls = int(box.cls[0])

                    # Confidence
                    conf = math.ceil(box.conf[0])

                    # Orgánico (subclases 0-3)
                    if cls in [0, 1, 2, 3]:
                        cv2.rectangle(frame_show, (x1, y1), (x2, y2), (255, 255, 0), 2)
                        text = f'{clsName[0]} -> {clsName[cls]} {int(conf) * 100}%'
                        images(img_organico, img_organicotxt)

                    # Papel (subclases 4-8)
                    elif cls in [4, 5, 6, 7, 8]:
                        cv2.rectangle(frame_show, (x1, y1), (x2, y2), (255, 255, 255), 2)
                        text = f'{clsName[1]} -> {clsName[cls]} {int(conf) * 100}%'
                        images(img_papel, img_papeltxt)

                    # Plástico (subclases 9-12)
                    elif cls in [9, 10, 11, 12]:
                        cv2.rectangle(frame_show, (x1, y1), (x2, y2), (0, 0, 255), 2)
                        text = f'{clsName[2]} -> {clsName[cls]} {int(conf) * 100}%'
                        images(img_plastico, img_plasticotxt)

                    # Mostrar texto en el frame
                    sizetext = cv2.getTextSize(text, cv2.FONT_HERSHEY_SIMPLEX, 1, 2)
                    dim = sizetext[0]
                    baseline = sizetext[1]
                    cv2.rectangle(frame_show, (x1, y1 - dim[1] - baseline), (x1 + dim[0], y1 + baseline), (0, 0, 0), cv2.FILLED)
                    cv2.putText(frame_show, text, (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 2)

            if detect == False:
                clean_lbl()

            frame_show = imutils.resize(frame_show, width=640)
            im = Image.fromarray(frame_show)
            img = ImageTk.PhotoImage(image=im)

            lblVideo.configure(image=img)
            lblVideo.image = img
            lblVideo.after(10, Scanning)

            im.close()

        else:
            cap.release()
            cv2.destroyAllWindows()
